apply from: '../metl-assemble/common.gradle'

apply plugin: 'com.devsoap.plugin.vaadin'

configurations {
    executableWar
}

eclipse {
    wtp {
        component {
            sourceDirs += file('src/test/resources')
        }
    }
}

war {
    archiveName="metl.war"
    jar.enabled = true
    from {
        configurations.executableWar.collect {
            it.isDirectory() ? it : project.zipTree(it)
        }
    }
    {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }    
    from ('build') { include 'plugins.zip' }
    manifest { attributes 'Main-Class': 'org.jumpmind.metl.Metl' }
}    

// Don't compress javascript
// vaadin.gwt.style = "PRETTY"
vaadin.version = vaadinVersion
vaadinCompile.widgetset = 'org.jumpmind.metl.ui.AppWidgetSet'
// use supplied GWT (2.9.0) instead of Vaadin-bundled:
vaadinCompile.gwtSdkFirstInClasspath = false
vaadinCompile.extraArgs = ['-sourceLevel', '1.11']
vaadin.manageDependencies = true
vaadin.manageRepositories = false
vaadin.push = true

dependencies {
    compile project(":metl-ui")
    vaadinCompile ('com.google.gwt:gwt-dev:2.9.0') {
       exclude group:'org.eclipse.jetty'
    }
    vaadinCompile 'com.google.gwt:gwt-user:2.9.0'
    vaadinCompile 'com.google.gwt:gwt-elemental:2.9.0'
    vaadinCompile ("com.vaadin:vaadin-client:$vaadinVersion")  {
       exclude group: 'com.vaadin.external.gwt'
    }
    vaadinCompile ("com.vaadin:vaadin-client-compiler:$vaadinVersion")  {
       exclude group: 'com.vaadin.external.gwt'
    }
    executableWar project(":metl-server")    
}

task copyJavaDocsToWebapp(type: Copy) {    
    dependsOn javadoc    
    destinationDir = file("src/main/webapp/doc")
    into('javadoc') {
        from ('../metl-core/build/docs/javadoc') { include '**/*' }
        from ('../metl-ui/build/docs/javadoc') { include '**/*' }
    }    
}

task copyPluginsForDevelopment (type:Copy) {
   rootProject.allprojects.findAll { it.name.startsWith('comp') || it.name.startsWith('resource') }.each {
       dependsOn ":$it.name:publishMavenJavaPublicationToMavenRepository"
   }
    
   from ('build/plugins')
   destinationDir file('../metl-develop/working/plugins')
   rename 'maven-metadata.xml(.*)', 'maven-metadata-local.xml$1'
}

task zipPlugins (type:Zip) {
    rootProject.allprojects.findAll { it.name.startsWith('comp') || it.name.startsWith('resource') }.each {
        dependsOn ":$it.name:publishMavenJavaPublicationToMavenRepository"
    }
    
    from ('build/plugins')
    destinationDir file('build') 
    rename 'maven-metadata.xml(.*)', 'maven-metadata-local.xml$1'
    archiveName 'plugins.zip'
}


develop.dependsOn tasks.getByPath(':metl-war:vaadinCompile')
develop.dependsOn copyJavaDocsToWebapp
assemble.dependsOn copyJavaDocsToWebapp
develop.dependsOn copyPluginsForDevelopment
war.dependsOn zipPlugins
assemble.dependsOn(jar)

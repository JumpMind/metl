import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat
import java.util.Date

    apply from: metlAssembleDir + '/asciidoc.gradle'

    group = 'org.jumpmind.metl'
        
    apply plugin: 'eclipse-wtp'
    apply plugin: 'java'
    apply plugin: 'license-report'
	apply plugin: 'jacoco'
	apply plugin: 'license'
	apply plugin: 'maven'
	
	ext {
	    origVersion = version
	    pluginBuildNumber = buildNumber = 'a'.equals(buildNumber) ?  ('a.' + new SimpleDateFormat("yyyyMMddHHmm").format(new Date())) : buildNumber
	}
	
	buildNumber = 'a'.equals(buildNumber) ?  ('a.' + new SimpleDateFormat("yyyyMMddHHmm").format(new Date())) : buildNumber
	version = version + "." + buildNumber
	
    sourceCompatibility=1.8
    targetCompatibility=1.8
    
    if (project.name.startsWith('comp') || project.name.startsWith('resource')) {
        apply plugin: 'maven-publish'
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                }
            }
            repositories {
                maven {
                    url "../metl-war/build/plugins"
                }
            }
        }
    }   
    
    license {
        header rootProject.file('HEADER')
        strictCheck true
        includes(["**/*.java", "**/*.properties", "**/*.xml"])
        excludes(["**/AppWidgetSet.gwt.xml"])
    }     
    
    ext {
        majorMinorVersion = version.substring(0, version.indexOf(".", version.indexOf(".")+ 1))
    }    
    
    repositories {
        // uncomment this if you want to use your local maven repository to test undelivered
        /// changes (like symmetricds changes)
        //mavenLocal()
        mavenCentral()        
        maven { url "http://maven.vaadin.com/vaadin-addons" }
        maven { url "http://maven.jumpmind.com/repo" }
        maven { url "http://repo.reficio.org/maven" }
        maven { url "https://repository.jboss.org/nexus/content/repositories/deprecated" }
        maven { url "http://www.soapui.org/repository/maven2" }
        maven { url "https://github.com/santhosh-tekuri/maven-repository/raw/master" }
        jcenter()        
    }     
     
    
    configurations { 
        deployerJars
        provided 
        testArtifacts.extendsFrom testRuntime
        all {
            // check for updates every build
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        }    
    }
    
    sourceSets.main.compileClasspath += [configurations.provided]
    
    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: deployUploadUrl) {
                authentication(userName: deployUser, password: deployPassword)
            }
        }
    }
    
    dependencies {
        deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }    
    
    artifacts { archives sourcesJar 
                testArtifacts testJar  }
    
    if (JavaVersion.current().isJava8Compatible()) {
      allprojects {
        tasks.withType(Javadoc) {
          options.addStringOption('Xdoclint:none', '-quiet')
          options.addStringOption("sourcepath", "")
          classpath += [configurations.provided]
        }
      }
    }       

    task deploy {
        description 'Shortcut for Maven users'
        dependsOn tasks.uploadArchives
    }    
    
    jar {
        manifest {
            attributes("Implementation-Title": project.name,
                       "Implementation-Version": version,
                       "Project-Artifact": project.name,                       
                       "Build-Version": version,
                       "Build-Time": new SimpleDateFormat("yyyyMMdd-HHmm").format(new Date()),
                       "Build-Scm-Version": gitVersion,
                       "Build-Scm-Branch": gitBranch)
        }    
    }    
    
    test {
        ignoreFailures true
    }
    
    dependencies {
        testCompile "org.mockito:mockito-all:$mockitoVersion"
        testCompile "org.powermock:powermock-api-mockito:$powerMockVersion"
        testCompile "org.powermock:powermock-module-junit4:$powerMockVersion"
        testCompile "xmlunit:xmlunit:$xmlunitVersion"   
    }    

    eclipse {
        classpath {
            downloadSources = true
            downloadJavadoc = false
            plusConfigurations += [configurations.provided]
        }        
        
        project.file.whenMerged { project ->
            project.natures.remove('org.springsource.ide.eclipse.gradle.core.nature')
            project.natures.remove('org.eclipse.buildship.core.gradleprojectnature')            
        }
    }   
    
    eclipse.project.file.withXml { provider ->
      ignoreDerivedResources(provider.asNode())
    }
 
    def ignoreDerivedResources(projectDescription, directories = ["target", "test-output"]) {
      def count = directories.count { file(it).exists() }
      if (count > 0) {
        def filter = projectDescription
          .appendNode("filteredResources")
          .appendNode("filter")
        filter.appendNode("id", System.currentTimeMillis().toString().trim())
        filter.appendNode("type", "26")
        filter.appendNode("name")
        def matcher = filter.appendNode("matcher")
        matcher.appendNode("id", "org.eclipse.ui.ide.orFilterMatcher")
        def arguments = matcher.appendNode("arguments")
        directories.each {
          if (file(it).exists()) {
            def dirMatcher = arguments.appendNode("matcher")
            dirMatcher.appendNode("id", "org.eclipse.ui.ide.multiFilter")
            dirMatcher.appendNode("arguments", "1.0-projectRelativePath-matches-false-false-${it}")
          }
        }
      }
    }    
       
    task develop {
        description 'Generates Eclipse artifacts and sets up your development environment'
        dependsOn tasks.cleanEclipse, tasks.cleanEclipseWtp, tasks.eclipse, tasks.eclipseWtp
    }
    
    task wrapper(type: Wrapper) {
        gradleVersion = '2.8'
    }    
